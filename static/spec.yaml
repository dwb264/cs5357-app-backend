  swagger: "2.0"
  info: 
    version: "1.0.0"
    title: "Man In van"
    description: "An app that connects movers to individuals in need of their services"
    contact: 
      name: "Swagger API Team"
      email: "apiteam@swagger.io"
      url: "http://swagger.io"
    license: 
      name: "MIT"
      url: "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
  host: "localhost:8081"
  basePath: "/"
  schemes: 
    - "http"
  consumes: 
    - "application/json"
  produces: 
    - "application/json"
  paths: 
    /profile: 
      get: 
        description: "Returns profile of current user"
        produces: 
          - "application/json"
        responses: 
          "200":
            description: "User returned"
            schema: 
              items: 
                $ref: "#/definitions/NewUser"
          "401":
            description: "Unauthorized access - user not logged in"  
          default: 
            description: "unexpected error"
      post: 
        description: "Creates a new user profile"
        operationId: "addUser"
        produces:
          - "application/json"
        parameters: 
          - 
            name: "newUser"
            in: "body"
            description: "New user details"
            required: true
            schema:
              $ref: "#/definitions/NewUser"
        responses: 
          "201":
            description: "User created successfully"
          "400":
            description: "Bad or missing data"
    /pets/{id}: 
      get: 
        description: "Returns a user based on a single ID, if the user does not have access to the pet"
        operationId: "findPetById"
        produces: 
          - "application/json"
          - "application/xml"
          - "text/xml"
          - "text/html"
        parameters: 
          - 
            name: "id"
            in: "path"
            description: "ID of pet to fetch"
            required: true
            type: "integer"
            format: "int64"
        responses: 
          "200":
            description: "pet response"
            schema: 
              $ref: "#/definitions/Pet"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
      delete: 
        description: "deletes a single pet based on the ID supplied"
        operationId: "deletePet"
        parameters: 
          - 
            name: "id"
            in: "path"
            description: "ID of pet to delete"
            required: true
            type: "integer"
            format: "int64"
        responses: 
          "204":
            description: "pet deleted"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
  definitions: 
    Pet: 
      type: "object"
      allOf: 
        - 
          $ref: "#/definitions/NewPet"
        - 
          required: 
            - "id"
          properties: 
            id: 
              type: "integer"
              format: "int64"
    NewPet: 
      type: "object"
      required: 
        - "name"
      properties: 
        name: 
          type: "string"
        tag: 
          type: "string"
    ErrorModel: 
      type: "object"
      required: 
        - "code"
        - "message"
      properties: 
        code: 
          type: "integer"
          format: "int32"
        message: 
          type: "string"
    NewUser:
      type: "object"
      required:
        - "username"
        - "type"
        - "first_name"
        - "last_name"
        - "password"
      properties:
        username:
          type: "string"
        type:
          type: "string"
        first_name:
          type: "string"
        last_name:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
          description: "User's phone number"
        zipcode: "string"
        vehicle: "string"
